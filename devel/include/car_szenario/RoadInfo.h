// Generated by gencpp from file car_szenario/RoadInfo.msg
// DO NOT EDIT!


#ifndef CAR_SZENARIO_MESSAGE_ROADINFO_H
#define CAR_SZENARIO_MESSAGE_ROADINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace car_szenario
{
template <class ContainerAllocator>
struct RoadInfo_
{
  typedef RoadInfo_<ContainerAllocator> Type;

  RoadInfo_()
    : szeneType()
    , startPoints()
    , endPoints()  {
    }
  RoadInfo_(const ContainerAllocator& _alloc)
    : szeneType(_alloc)
    , startPoints(_alloc)
    , endPoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _szeneType_type;
  _szeneType_type szeneType;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _startPoints_type;
  _startPoints_type startPoints;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _endPoints_type;
  _endPoints_type endPoints;





  typedef boost::shared_ptr< ::car_szenario::RoadInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_szenario::RoadInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RoadInfo_

typedef ::car_szenario::RoadInfo_<std::allocator<void> > RoadInfo;

typedef boost::shared_ptr< ::car_szenario::RoadInfo > RoadInfoPtr;
typedef boost::shared_ptr< ::car_szenario::RoadInfo const> RoadInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_szenario::RoadInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_szenario::RoadInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_szenario::RoadInfo_<ContainerAllocator1> & lhs, const ::car_szenario::RoadInfo_<ContainerAllocator2> & rhs)
{
  return lhs.szeneType == rhs.szeneType &&
    lhs.startPoints == rhs.startPoints &&
    lhs.endPoints == rhs.endPoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_szenario::RoadInfo_<ContainerAllocator1> & lhs, const ::car_szenario::RoadInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_szenario

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::car_szenario::RoadInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_szenario::RoadInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_szenario::RoadInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_szenario::RoadInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_szenario::RoadInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_szenario::RoadInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_szenario::RoadInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d73c6909833f4f488b467a9cd08b32f8";
  }

  static const char* value(const ::car_szenario::RoadInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd73c6909833f4f48ULL;
  static const uint64_t static_value2 = 0x8b467a9cd08b32f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_szenario::RoadInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_szenario/RoadInfo";
  }

  static const char* value(const ::car_szenario::RoadInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_szenario::RoadInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents a part/szene of a map with start- and endpoints of markings in szene\n"
"\n"
"string szeneType\n"
"geometry_msgs/Point[] startPoints\n"
"geometry_msgs/Point[] endPoints\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::car_szenario::RoadInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_szenario::RoadInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.szeneType);
      stream.next(m.startPoints);
      stream.next(m.endPoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_szenario::RoadInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_szenario::RoadInfo_<ContainerAllocator>& v)
  {
    s << indent << "szeneType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.szeneType);
    s << indent << "startPoints[]" << std::endl;
    for (size_t i = 0; i < v.startPoints.size(); ++i)
    {
      s << indent << "  startPoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.startPoints[i]);
    }
    s << indent << "endPoints[]" << std::endl;
    for (size_t i = 0; i < v.endPoints.size(); ++i)
    {
      s << indent << "  endPoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.endPoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_SZENARIO_MESSAGE_ROADINFO_H
